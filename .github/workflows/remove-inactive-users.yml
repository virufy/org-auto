name: Identify All Users and Inactive Users

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs weekly at midnight Sunday
  workflow_dispatch:

env:
  EXCLUDED_USERS: amilkh,moonnada,Frederick-Cosper,vj-virufy
  INACTIVITY_THRESHOLD_DAYS: 31  # Set default value here

jobs:
  identify-users:
    name: Identify All Users and Inactive Users
    runs-on: ubuntu-latest

    steps:
      # Step 0: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" | gh auth login --with-token
      
      # Step 1: Set Threshold (now in environment)
      - name: Initialize Variables
        run: |
          echo "INACTIVITY_THRESHOLD_DAYS=31" >> $GITHUB_ENV
          echo "Using inactivity threshold: ${{ env.INACTIVITY_THRESHOLD_DAYS }} days"

      # Step 2: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 3: Install jq
      - name: Install jq
        run: sudo apt-get install jq -y

      # Step 4: Fetch Organization Members 
      - name: Fetch Organization Members
        run: |
          echo "Fetching members..."
          page=1
          members_file="org_members.json"
          echo "[]" > $members_file

          while true; do
            response=$(curl -H "Authorization: Bearer ${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" \
              "https://api.github.com/orgs/virufy/members?per_page=100&page=$page")
            
            if [ "$(echo "$response" | jq '. | length')" -eq 0 ]; then
              break
            fi

            jq -s '.[0] + .[1]' $members_file <(echo "$response") > tmp.json && mv tmp.json $members_file
            page=$((page + 1))
          done

      # Step 5: Display All Users
      - name: Display All Users
        run: |
          echo "All Users:" > all_users.txt
          jq -r '.[].login' org_members.json | while read username; do
            events=$(curl -H "Authorization: Bearer ${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" \
              https://api.github.com/users/$username/events)
            last_active=$(echo "$events" | jq -r '.[0].created_at // null')
            echo "- $username (Last active: ${last_active:-Never})" >> all_users.txt
          done
          cat all_users.txt

      # Step 6: Identify Inactive Users (FIXED)
      - name: Identify Inactive Users
        run: |
          current_timestamp=$(date -u +%s)
          threshold_seconds=$((${{ env.INACTIVITY_THRESHOLD_DAYS }} * 86400))
          
          echo "Inactive Users:" > inactive_users.txt
          echo "Threshold date: $(date -u -d "@$((current_timestamp - threshold_seconds))" '+%Y-%m-%dT%H:%M:%SZ')" >> inactive_users.txt
          
          jq -r '.[].login' org_members.json | while read username; do
            events=$(curl -H "Authorization: Bearer ${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" \
              https://api.github.com/users/$username/events)
              
            last_active=$(echo "$events" | jq -r '.[0].created_at // null')
            
            if [ "$last_active" != "null" ]; then
              last_ts=$(date -u -d "$last_active" +%s)
              time_diff=$((current_timestamp - last_ts))
              is_inactive=$((time_diff > threshold_seconds))
            else
              is_inactive=1
            fi

            if [ "$is_inactive" -eq 1 ]; then
              if [[ ! " ${excluded_users[@]} " =~ " ${username} " ]]; then
                echo "- $username (Last active: ${last_active:-Never})" >> inactive_users.txt
              fi
            fi
          done
          
          cat inactive_users.txt

      # Step 7: Upload Artifacts
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: user-reports
          path: |
            all_users.txt
            inactive_users.txt
