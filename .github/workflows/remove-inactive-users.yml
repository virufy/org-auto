name: Track User Activity

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  fetch-user-activity:
    name: Fetch User Activity
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install jq (for JSON processing)
      - name: Install jq
        run: sudo apt-get install jq -y

      # Step 3: Fetch Organization Members (with Pagination)
      - name: Fetch Organization Members
        run: |
          echo "Fetching all organization members..."
          page=1
          members_file="org_members.json"
          echo "[]" > $members_file  # Initialize an empty JSON array

          while true; do
            response=$(curl -H "Authorization: Bearer ${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" \
              "https://api.github.com/orgs/virufy/members?per_page=100&page=$page")
            
            # Check if response is empty (no more pages)
            if [ "$(echo "$response" | jq '. | length')" -eq 0 ]; then
              break
            fi

            # Append current page results to the JSON file
            jq -s '.[0] + .[1]' $members_file <(echo "$response") > tmp.json && mv tmp.json $members_file
            
            # Increment page number
            page=$((page + 1))
          done

          echo "Organization members saved to $members_file"

    # Step 4: Fetch User Activity for Each Member
      - name: Fetch User Activity
        run: |
          echo "Fetching user activity..."
          echo "[" > user_activity.json  # Start the JSON array
          first_entry=true
          jq -r '.[].login' org_members.json | while read username; do
            echo "Fetching events for $username..."
            curl -H "Authorization: Bearer ${{ secrets.ORGANIZATION_ACCESS_TOKEN }}" \
              https://api.github.com/users/$username/events \
              | jq '[.[] | {type, created_at}]' > ${username}_events.json
            
            # Get the most recent event timestamp
            last_active=$(jq -r '.[0].created_at // null' ${username}_events.json)
            
            # Add comma for all but the first entry
            if [ "$first_entry" = true ]; then
              first_entry=false
            else
              echo "," >> user_activity.json
            fi
            
            # Append the user data as a JSON object
            jq -n --arg login "$username" --arg last_active "$last_active" \
              '{login: $login, last_active: $last_active}' >> user_activity.json
          done
          echo "]" >> user_activity.json  # End the JSON array

          # Validate and pretty-print the final JSON
          jq '.' user_activity.json > temp.json && mv temp.json user_activity.json


      # Step 5: Save Results as an Artifact
      - name: Upload User Activity Report
        uses: actions/upload-artifact@v4
        with:
          name: user-activity-report
          path: user_activity.json
